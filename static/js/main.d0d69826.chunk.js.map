{"version":3,"sources":["Components/Visualizer/Visualizer.module.css","App.module.css","Components/Controls/Controls.module.css","Components/Controls/Controls.jsx","Components/Node/Node.jsx","Components/Node/Nodedemo.jsx","Algorithms/Dijkstra’s.js","Components/Visualizer/Visualizer.jsx","Components/Learn/Learn.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Controls","id","className","styles","container","item","htmlFor","value","this","props","algo","onChange","e","updateAlgo","target","speed","updateSpeed","onClick","handleVisualize","resetGrid","clearGrid","Component","Node","col","isEnd","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","identifier","Nodedemo","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Visualizer","state","mouseIsPressed","startRow","startCol","endRow","endCol","working","setState","initializeGrid","newGrid","getNewGridWithWallToggled","temp","newNode","slice","graphHistory","shortestPath","i","S","document","getElementById","setAttribute","promises","forEach","checkNode","Promise","resolve","object","setTimeout","updateVisitedNode","updatePathNode","all","then","removeAttribute","console","log","nodesInShortestPathOrder","astar","astarPath","currentNode","unshift","dijkstraPath","bfs","bfsPath","dfs","dfsPath","animate","resetNode","updateTemp","legend","legend_item","visualizer","map","rowIdx","key","grid_row","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","Home","container_visualizer","Learn","About","App","navbar","navbar_main","navbar_items","to","main","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0d69826.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid_row\":\"Visualizer_grid_row__3yu7a\",\"visualizer\":\"Visualizer_visualizer__-T-Jh\",\"legend\":\"Visualizer_legend__2sOyc\",\"legend_item\":\"Visualizer_legend_item__13paI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"main\":\"App_main__3ZkGI\",\"container_visualizer\":\"App_container_visualizer__wZ9_s\",\"navbar\":\"App_navbar__3gDlA\",\"navbar_main\":\"App_navbar_main__2mbEO\",\"navbar_items\":\"App_navbar_items__2MF2I\",\"narbar_items\":\"App_narbar_items__1lVA0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Controls_container__1uaEy\",\"item\":\"Controls_item__1u8Ma\",\"diabled\":\"Controls_diabled__2X1WN\"};","import React from 'react';\nimport { Component } from 'react';\n\nimport styles from './Controls.module.css';\n\nclass Controls extends Component {\n  render() {\n    return (\n      <div id=\"controls\" className={styles.container}>\n        <div className={styles.item}>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleSelect2\">Select algorithm</label>\n            <select id=\"select1\" className=\"form-control\" value={this.props.algo} onChange={(e) => {this.props.updateAlgo(e.target.value)}}>\n              <option>A*</option>\n              <option>Dijkstra’s</option>\n              <option>BFS</option>\n              <option>DFS</option>\n            </select>\n          </div>\n        </div>\n        <div className={styles.item}>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleSelect2\">Simulation speed</label>\n            <select id=\"select2\" className=\"form-control\" value={this.props.speed} onChange={(e) => {this.props.updateSpeed(e.target.value)}}>\n              <option>Normal</option>\n              <option>Fast</option>\n              <option>Slow</option>\n            </select>\n          </div>\n        </div>\n        \n        <div className={styles.item}>\n          <button id=\"btn1\" className=\"btn btn-info\" onClick={() => this.props.handleVisualize()}>Visualize</button>\n        </div>\n        <div className={styles.item}>\n          <button id=\"btn2\" className=\"btn btn-danger\" onClick={() => this.props.resetGrid()}>Reset Grid</button>\n        </div>\n        <div className={styles.item}>\n          <button id=\"btn3\" className=\"btn btn-danger\" onClick={() => this.props.clearGrid()}>Clear Grid</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Controls;","import React, { Component } from 'react';\nimport './Node.css';\n\nclass Node extends Component {\n  render() {\n    const {col, isEnd, isStart, isWall, onMouseDown, onMouseEnter, onMouseUp, row} = this.props;\n    const identifier = isEnd\n      ? 'node-end'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${identifier}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n\nexport default Node;","import React, { Component } from 'react';\nimport './Node.css';\n\nclass Nodedemo extends Component {\n  render() {\n    const { identifier } = this.props;\n\n    return (\n      <div className={`node ${identifier}`}></div>\n    );\n  }\n}\n\nexport default Nodedemo;","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      // If we encounter a wall, we skip it.\n      if (closestNode.isWall) continue;\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n  \n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }","import React, { Component } from 'react';\nimport styles from './Visualizer.module.css';\n\nimport Node from '../Node/Node'\nimport Nodedemo from '../Node/Nodedemo'\n\nimport Controls from '../Controls/Controls';\nimport { astar, getNodesInShortestPathOrder as astarPath } from '../../Algorithms/Astar';\nimport { dijkstra, getNodesInShortestPathOrder as dijkstraPath } from '../../Algorithms/Dijkstra’s';\nimport { bfs, getNodesInShortestPathOrder as bfsPath } from '../../Algorithms/BFS';\nimport { dfs, getNodesInPathOrder as dfsPath } from '../../Algorithms/DFS';\n\nclass Visualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      speed: `Normal`,\n      algo: `Dijkstra’s`,\n      startRow: 10,\n      startCol: 5,\n      endRow: 10,\n      endCol: 35,\n      working: false,\n    };\n  }\n\n  updateAlgo(algo) {\n    this.setState({algo: algo});\n  }\n\n  updateSpeed(speed) {\n    this.setState({speed: speed});\n  }\n\n  componentDidMount() { \n    this.setState({grid: this.initializeGrid()});\n  }\n\n  handleMouseDown(row, col) {\n    if (this.state.working) return;\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed || this.state.working) return;\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    if (this.state.working) return;\n    this.setState({mouseIsPressed: false});\n  }\n\n  initializeGrid() {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const temp = [];\n      for (let col = 0; col < 40; col++) {\n        temp.push(this.newNode(col, row));\n      }\n      grid.push(temp);\n    }\n    return grid;\n  };\n  \n  newNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.startRow && col === this.state.startCol,\n      isEnd: row === this.state.endRow && col === this.state.endCol,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n  \n   getNewGridWithWallToggled(grid, row, col) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  //【开始】动画算法methods\n  animate(graphHistory, shortestPath) {\n    let i = 0;\n    const { speed } = this.state;\n    let S = 0;\n    if (speed === \"Normal\") {\n      S = 0.5;\n    } \n    else if (speed === \"Fast\") {\n      S = 0.25;\n    } \n    else {\n      S = 7;\n    }\n    document.getElementById(\"select1\").setAttribute('disabled', '');\n    document.getElementById(\"select2\").setAttribute('disabled', '');\n    document.getElementById(\"btn1\").setAttribute('disabled', '');\n    document.getElementById(\"btn2\").setAttribute('disabled', '');\n    document.getElementById(\"btn3\").setAttribute('disabled', '');\n    this.setState({working: true});\n    let promises = [];\n    graphHistory.forEach((node) => {\n      if (this.checkNode(node)) return;\n      promises.push(new Promise(\n        (resolve, object) => {\n          setTimeout(() => {\n            this.updateVisitedNode(node.row, node.col);\n            resolve();\n          }, 30 * i * S);\n        }\n      ))\n      ++i;\n    })\n    shortestPath.forEach((node) => {\n      if (this.checkNode(node)) return;\n      promises.push(new Promise(\n        (resolve, object) => {\n          setTimeout(() => {\n            this.updatePathNode(node.row, node.col);\n            resolve();\n          }, 30 * i * S);\n        }\n      ))\n      ++i;\n    });\n    Promise.all(promises).then(() => {\n      document.getElementById(\"select1\").removeAttribute('disabled');\n      document.getElementById(\"select2\").removeAttribute('disabled');\n      document.getElementById(\"btn1\").removeAttribute('disabled');\n      document.getElementById(\"btn2\").removeAttribute('disabled');\n      document.getElementById(\"btn3\").removeAttribute('disabled');\n      this.setState({working: false});\n    });\n  }\n\n  // helper methods\n  checkNode(node) {\n    return (node.isStart || node.isEnd);\n  }\n\n  updateVisitedNode(row, col) {\n    document.getElementById(`node-${row}-${col}`).className = 'node node-visited';\n  }\n\n  updatePathNode(row, col) {\n    document.getElementById(`node-${row}-${col}`).className = 'node node-shortest-path';\n  }\n  //【结束】\n\n  //【开始】处理按钮的methods\n  handleVisualize() {\n    this.resetGrid();\n    const {grid} = this.state;\n    console.log(grid);\n    const startNode = grid[this.state.startRow][this.state.startCol];\n    const finishNode = grid[this.state.endRow][this.state.endCol];\n    let visitedNodesInOrder = null;\n    let nodesInShortestPathOrder = null;\n    console.log(this.state.algo);\n    if (this.state.algo === `A*`) {\n      visitedNodesInOrder = astar(grid, startNode, finishNode);\n      nodesInShortestPathOrder = astarPath(finishNode);\n    }\n    else if (this.state.algo === `Dijkstra’s`) {\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      nodesInShortestPathOrder = dijkstraPath(finishNode);\n    }\n    else if (this.state.algo === `BFS`) {\n      visitedNodesInOrder = bfs(grid, startNode, finishNode);\n      nodesInShortestPathOrder = bfsPath(finishNode);\n    }\n    else if (this.state.algo === `DFS`) {\n      visitedNodesInOrder = dfs(grid, startNode, finishNode);\n      nodesInShortestPathOrder = dfsPath(finishNode);\n    }\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  //重设grid，全部visited过的和path都洗掉除了walls和开始点和结束点\n  resetGrid() {\n    const { grid } = this.state;\n    grid.forEach((row) => {\n      row.forEach((node) => {\n        if (node.isVisited && !(node.isStart || node.isEnd || node.isWall)) {\n          grid[node.row][node.col].isVisited = false;\n          this.resetNode(node.row, node.col);\n        }\n        else if (node.isVisited) {\n          grid[node.row][node.col].isVisited = false;\n        }\n        grid[node.row][node.col].distance = Infinity;\n      })\n    })\n    this.setState({grid: grid});\n  }\n\n  //全部grid上面都洗掉除了开始点和结束点\n  clearGrid() {\n    const { grid } = this.state;\n    grid.forEach((row) => {\n      row.forEach((node) => {\n        if ((node.isVisited || node.isWall) && !(node.isStart || node.isEnd)) {\n          grid[node.row][node.col].isVisited = false;\n          grid[node.row][node.col].isWall = false;\n          this.resetNode(node.row, node.col);\n        }\n        grid[node.row][node.col].distance = Infinity;\n      })\n    })\n    this.setState({grid: grid});\n  }\n\n  // helper method\n  resetNode(row, col) {\n    document.getElementById(`node-${row}-${col}`).className = 'node';\n  }\n  //【结束】\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n    return (\n      <div className={styles.container}>\n        <Controls handleVisualize={() => this.handleVisualize()} resetGrid={() => this.resetGrid()} clearGrid={() => this.clearGrid()} algo={this.state.algo} updateAlgo={(algo) => this.updateAlgo(algo)} speed={this.state.speed} updateSpeed={(speed) => this.updateSpeed(speed)} updateTemp={(temp) => {this.updateTemp(temp)}}/>\n        <div className={styles.legend}>\n          <div className={styles.legend_item}>\n            <Nodedemo identifier={\"node-start\"}></Nodedemo>\n            <p>Start</p>\n          </div>\n          <div className={styles.legend_item}>\n            <Nodedemo identifier={\"node-end\"}></Nodedemo>\n            <p>End</p>\n          </div>\n          <div className={styles.legend_item}>\n            <Nodedemo identifier={\"node-wall\"}></Nodedemo>\n            <p>Wall</p>\n          </div>\n          <div className={styles.legend_item}>\n            <Nodedemo identifier={\"node-visited\"}></Nodedemo>\n            <p>Visited</p>\n          </div>\n          <div className={styles.legend_item}>\n            <Nodedemo identifier={\"node-shortest-path\"}></Nodedemo>\n            <p>Path</p>\n          </div>\n        </div>\n        <div className={styles.visualizer}>\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx} className={styles.grid_row}>\n                {row.map((node, nodeIdx) => {\n                const {row, col, isEnd, isStart, isWall} = node;\n                return (\n                  <Node key={nodeIdx} col={col} isEnd={isEnd} isStart={isStart} isWall={isWall}\n                      mouseIsPressed={mouseIsPressed} onMouseDown={(row, col)=> this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                      this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Visualizer;","import React, { Component } from 'react';\n\nclass Learn extends Component {\n    render() {\n        return (\n            <div>\n\n            </div>\n        )\n    }\n}\n\nexport default Learn;","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport styles from './App.module.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Visualizer } from './Components';\n\nfunction App() {\n  return (\n    <Router>\n      <div className={styles.App}>\n        <div className={styles.navbar}>\n          <div className={styles.navbar_main}>\n            <h1>Algorithm Visualizer</h1>\n          </div>\n          <div className={styles.navbar_items}>\n            <Link to=\"/\" className=\"nav-link\"><h5>Home</h5></Link>\n            <Link to=\"/learn\" className=\"nav-link\"><h5>Learn</h5></Link>\n            <Link to=\"/about\" className=\"nav-link\"><h5>About</h5></Link>\n          </div>\n        </div>\n      \n        <div className={styles.main}>\n          <Switch>\n            <Route path=\"/learn\">\n              <Learn />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <div className={styles.container_visualizer}>\n        <Visualizer></Visualizer>\n      </div>\n    </div>\n  )\n}\n\nfunction Learn() {\n  return (\n    <div>\n      <p>Under development!</p>\n    </div>\n  )\n}\n\nfunction About() {\n  return (\n    <div>\n      <p>Under development!</p>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}